design_task:
  description: >
    Take the high level requirements described here and prepare a detailed design for the engineer;
    everything should be in 1 python module, but outline the classes and methods in the module.
    Here are the requirements: {requirements}
    IMPORTANT: Only output the design in markdown format, laying out in detail the classes and functions in the module, describing the functionality.
  expected_output: >
    A detailed design for the engineer, identifying the classes and functions in the module.
  agent: engineering_lead
  output_file: output/{module_name}_design.md

code_task:
  description: >
    Write a python module that implements the design described by the engineering lead, in order to achieve the requirements.
    Here are the requirements: {requirements}
  expected_output: >
    A python module that implements the design and achieves the requirements.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: backend_engineer
  context:
    - design_task
  output_file: output/{module_name}

frontend_task:
  description: >
    Write a sophisticated Gradio UI in a module app.py that demonstrates the backend class in {module_name}.
    The UI should include user login or selection, tabbed navigation for account actions, real-time portfolio stats,
    error handling, and a clean layout.
    Here are the requirements: {requirements}
  expected_output: >
    A gradio UI in module app.py that demonstrates the given backend class.
    The file should be ready so that it can be run as-is, in the same directory as the backend module, and it should import the backend class from {module_name}.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: frontend_engineer
  context:
    - code_task
  output_file: output/app.py

test_task:
  description: >
    Write unit tests for the given backend module {module_name} and create a test_{module_name} in the same directory as the backend module.
  expected_output: >
    A test_{module_name} module that tests the given backend module.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid and tested Python code that can be directly saved to a file and executed. And it should be working propley with the backend module.
  agent: test_engineer
  context:
    - code_task
  output_file: output/test_{module_name}

final_review_task:
  description: >
    Perform a final review of the backend module {module_name}, the test suite test_{module_name}, and the frontend UI app.py.
    Ensure that:
      - The backend module correctly implements the requirements
      - The test suite runs successfully, with adequate coverage
      - The Gradio UI in app.py correctly interfaces with the backend and offers a clean user experience
      - All components work together in a single directory with no errors
      - Edge cases and input validation are properly handled
    You should run and verify the full stack manually or by inspection. Your output should include a review summary of each component, any issues found, and a final pass/fail decision.
  expected_output: >
    A written review summary in markdown format, reviewing:
      1. Backend module ({module_name})
      2. Unit test module (test_{module_name})
      3. Gradio UI (app.py)
    Each section should include findings and a final decision (PASS/FAIL) with reasoning.
    IMPORTANT: Output only in markdown format.
  agent: final_reviewer
  context:
    - design_task
    - code_task
    - frontend_task
    - test_task
  output_file: output/{module_name}_final_review.md
